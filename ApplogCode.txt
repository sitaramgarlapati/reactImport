using Moq;
using MongoDB.Driver;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Threading.Tasks;
using Xunit;

public class DecisionHistoryRepositoryTests
{
    private readonly Mock<IDecisionHistoryRepository> _mockRepository;
    private readonly DecisionHistoryRepository _repository;

    public DecisionHistoryRepositoryTests()
    {
        _mockRepository = new Mock<IDecisionHistoryRepository>();
        _repository = new DecisionHistoryRepository(_mockRepository.Object);
    }

    [Fact]
    public async Task GetDecisionLogs_ShouldReturnFilteredResults()
    {
        // Arrange
        string requestId = "12345";

        var sampleData = new List<DecisionHistory>
        {
            new DecisionHistory { Id = "1", RequestId = "12345", Status = "Approved" },
            new DecisionHistory { Id = "2", RequestId = "67890", Status = "Rejected" }
        };

        // Mock FindAll method to return only matching requestId data
        _mockRepository
            .Setup(repo => repo.FindAll(It.IsAny<Expression<Func<DecisionHistory, bool>>>()))
            .ReturnsAsync((Expression<Func<DecisionHistory, bool>> filter) =>
            {
                var compiledFilter = filter.Compile();
                return sampleData.Where(compiledFilter).ToList();
            });

        // Act
        var result = await _repository.GetDecisionLogs(requestId);

        // Assert
        Assert.Single(result);
        Assert.Equal("12345", result[0].RequestId);
        Assert.Equal("Approved", result[0].Status);

        // Verify FindAll was called once
        _mockRepository.Verify(repo => repo.FindAll(It.IsAny<Expression<Func<DecisionHistory, bool>>>()), Times.Once);
    }
}
