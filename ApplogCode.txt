[Fact]
public async Task FindAll_ShouldReturnFilteredResults()
{
    // Arrange
    var sampleData = new List<DecisionHistory>
    {
        new DecisionHistory { Id = "1", Status = "Approved" },
        new DecisionHistory { Id = "2", Status = "Rejected" }
    };

    _mockRepository
        .Setup(repo => repo.FindAll(It.IsAny<Expression<Func<DecisionHistory, bool>>>()))
        .ReturnsAsync((Expression<Func<DecisionHistory, bool>> filter) =>
        {
            var compiledFilter = filter.Compile();
            return sampleData.Where(compiledFilter).ToList();
        });

    // Define filter
    Expression<Func<DecisionHistory, bool>> filter = x => x.Status == "Approved";

    // Act
    var result = await _repository.FindAll(filter);

    // Assert
    Assert.Single(result);
    Assert.Equal("Approved", result[0].Status);

    // Verify FindAll() was called exactly once
    _mockRepository.Verify(repo => repo.FindAll(It.IsAny<Expression<Func<DecisionHistory, bool>>>()), Times.Once);
}
